// EX3 a
module(miseAJourPrix;reference,prix,pDebutJouets;)
---*
pJouets = pDebutJouets
while(pJouets != NULL AND reference != pJouets->reference)
  pJouets = pJouets->pSuiv
endwhile

if(pJouets == NULL)
  sortir "Le jouet n'est pas repris dans la liste"
else
  if(pJouets->prix != prix)
    pJouets->prix = prix
  else
    sortir "Le prix du jouet n'est pas différent"
  endif 
endif
------

// EX3 b

module(nbJouetsPlus50;pDebutJouets;nbJouetsPlus50)
---*
nbJouetsPlus50 = 0
pJouets = pDebutJouets
while(pJouets != NULL)
 if(pJouets->prix > 50)
     nbJouetsPlus50++
 endif
 pJouets = pJouets->pSuiv
endwhile
------

// Ex3 C

module(afficheReferenceInferieurAPrix;pDebutJouets,prix;)
---*
prixJouetMoinsCher = HV
pJouets = pDebutJouets
while(pJouets != NULL)
// Je pars du principe qu'on peut sortir la référence du jouet le moins cher même si il n'est pas 
// moins cher que le prix rentré en paramètre
if(pJouets->prix < prixJouetMoinsCher)
  prixJouetMoinsCher = pJouets->prix
  referenceJouetMoinsCher = pJouets->reference
endif
 if(pJouets->prix < prix)
   sortir pJouets->reference
  endif 
 pJouets = pJouets-pSuiv
endwhile
------

// Ex3 E

// nbJouetsParPrix { cell (5*) { prix, quantite
module(afficheJouetsParPrix;pDebutJouets;)
---*
pJouets = pDebutJouets
while(pDebutJouets != null)
iPrix = 0
  while(iPrix < 5)
    if(pJouets->prix < nbJouetsParPrix[iprix].prix)
      nbJouetsParPrix[iPrix].quantite++
    endif
    iPrix++
  endwhile
pJouets = pDebutJouets->pSuiv
endwhile

iNbJouets = 0
while(iNbJouets < 5)
  sortir nbJouetsParPrix[iNbJouets].quantite
sortir 
iNbJouets++
endwhile
--------



// EX 4 CAS 1

// articles { cell (nbArticles*) { reference
//                                 quantite


module(infosClients;pDebutClient;)
---*
quantiteMax = LV
pClient = pDebutClient
while (pClient != null)
  sortir pClient->numCarte
  nbArticles = pClient->nbArticles
  iArticle = 0
  while(iArticle < nbArticles)
    sortir pClient->articles[iArticle].reference, pClient->articles[iArticle].quantite
    if(pClient->articles[iArticle].quantite > quantiteMax)
        quantiteMax = pClient->articles[iArticle].quantite
        refArticlePlusAchete = pClient->articles[iArticle].reference 
    endif
    iArticle++
  endwhile
  sortir refArticlePlusAchete
  pClient = pClient->pSuiv
endwhile
------

// EX 4 CAS 2

// Bloc logique sur les clients

module(infosAchats;pDebutAchats;)
---*
quantiteMax = LV
pAchat = pDebutAchats
while(pAchat != null)
  clientEnCours = pAchat->numCarte
  sortir clientEnCours
  while(pAchat != null && pAchat->numCarte == clientEnCours)
    sortir pAchat->reference
    sortir pAchat->quantite
    if(pAchat->quantite > quantiteMax)
      quantiteMax = pAchat->quantite
      refArticlePlusAchete = pAchat->reference
    endif
    pAchat = pAchat->pSuiv
  endwhile
sortir refArticlePlusAchete
endwhile
------

// EX 5
module(ajoutDebutListe;pDebutJouets;)
---*
module(ficheObtenue;;fiche,ficheExiste)
if(ficheExiste)
  pNouvJouet =  adresse mémoire nouveau chainon
  if(pNouvJouet != NULL)
    pNouvJouet->reference = fiche.reference
    pNouvJouet->nom = fiche.nom
    pNouvJouet->prix = fiche.prix
    pNouvJouet->nbExemplaires = fiche.nbExemplaires
    pNouvJouet->pSuiv = pDebutJouets
    pDebutJouets = pNouvJouet
  else
    sortir "Mémoire insuffisante"
  endif
else
  sortir "Veuillez entrez des informations valides"
endif
------

module(ajoutFinListe;pDebutJouets;)
---*
module(ficheObtenue;;fiche,ficheExiste)
if(ficheExiste)
  pNouvJouet =  adresse mémoire nouveau chainon
  if(pNouvJouet != NULL)
    pNouvJouet->reference = fiche.reference
    pNouvJouet->nom = fiche.nom
    pNouvJouet->prix = fiche.prix
    pNouvJouet->nbExemplaires = fiche.nbExemplaires
    pJouet = pDebutJouets
    while(pJouet != NULL)
      pJouetPrecedent = pJouet
      pJouet = pJouet->pSuiv
    endwhile
    pJouetPrecedent->pSuiv = pNouvJouet
    pNouvJouet->pSuiv = null
  else
    sortir "Mémoire insuffisante"
  endif
else
  sortir "Veuillez entrez des informations valides"
endif
------


// EX 6 B
module(ajouterSalle;pDebutSalles;)
---*
pNouvSalle = allocation en mémoire du nouveau chainon
if(pNouvSalle != NULL)
  pSalle = pDebutSalles
  whille(pSalle != NULL)
     pPrecedent = pSalle    
     pSalle = pSalle->pSalleSuiv
  endwhile
  pNouvSalle->numero = pPrecedent->numero + 1
  pNouvSalle->nbOeuvres = 0
  pNouvSalle->pDébutOeuvres = NULL
  pNouvSalle->pSalleSuiv = NULL
  pPrecedent->pSalleSuiv = pNouvSalle
else
 sortir "ERREUR MEMOIRE"
endif
------

// EX 6 C
module(ajoutOeuvre;reference,titre,numeroSalle,pDebutSalle;message)
---*
pNouvOeuvre = allocation en mémoire du nouveau chainon
if(pNouvOeuvre != NULL)
  pSalle = pDebutSalle
  while(pSalle != NULL AND pSalle->numero < numeroSalle)
    pSalle = pSalle->pSalleSuiv
  endwhile
  if(pSalle != NULL && pSalle->numero == numeroSalle)
      pOeuvre = pSalle->pDebutOeuvres
      while(pOeuvre != Null AND pOuvre->reference < reference)
          pPrecedent = pOeuvre
          pOeuvre = pOeuvre->pOeuvreSuiv
      endwhile
      if(pOeuvre->reference != reference)
          pNouvOeuvre->reference = reference
          pNouvOeuvre->titre = titre
          pNouvOeuvre->pOeuvreSuiv = pOeuvre
          if(pOeuvre == pSalle->pDebutOeuvres)
            pDebutOeuvres = pNouvOeuvre
          else
            pPrecedent->pOeuvreSuiv = pNouvOeuvre
          endif
      else
         message = "L'oeuvre est déja présente dans la salle"
      endif
  else
    message = "Numero de salle d'expo inexistant" 
  endif
else
  message = "ERREUR MEMOIRE"
endif
------

// EX 6 D

module(suppressionSalle;numeroSalle,pDebutSalle;pDebutSalle,message)
---*
pSalle = pDebutSalle
while(pSalle != NULL && pSalle->numero < numeroSalle)
  pPrecedent = pSalle
  pSalle = pSalle->pSalleSuiv
enwhile

if(pSalle != NULL && pSalle->numero == numeroSalle)
  if(pSalle == pDebutSalle)
    pDebutSalle = pSalle->pSalleSuiv
  else
    pPrecedent->pSalleSuiv = pSalle->pSalleSuiv
  endif
  pOeuvre = pSalle->pDebutOeuvre
  while(pOeuvre != null)
      pOeuvreSuppr = pOeuvre
      pOeuvre = pOeuvre->pOeuvreSuiv
      libérer la mémoire pointé par pOeuvreSuppr
  endwhile
  libérer la mémoire pointé par pSalle
else
 message = "Erreur numero de salle introuvable"
endif
------
